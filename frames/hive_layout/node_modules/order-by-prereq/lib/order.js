(function () {
var root = this;
    if (typeof _ == 'undefined'){
        _ = require('underscore');
    }

    function _get_item_key(key) {
        if (_.isFunction(key)) {
            return key;
        } else if (!key) {
            key = 'id';
        }

        return function (item) {
            return item[key];
        }
    }

    function _get_item_req(get_item) {
        if (!get_item) {
            get_item = 'requires';
        }
        if (_.isString(get_item)) {
            return function (item) {
                return item[get_item] ? _.toArray(item[get_item]) : [];
            }
        } else {
            return function (item) {
                var req = get_item(item);
                return req ? _.toArray(req) : [];
            };
        }
    }

    function _missing_reqs(items, get_item_key, get_item_req) {
        var reqs = _.flatten(_.map(items, get_item_req));
        var keys = _.map(items, get_item_key);

        return _.difference(reqs, keys);
    }

    function OrderByPrereq(items, item_key, get_item_req) {
        get_item_key = _get_item_key(item_key);
        get_item_req = _get_item_req(get_item_req);

        function _has_req(item) {
            var req = get_item_req(item);
            return req && req.length > 0;
        }

        var missing = _missing_reqs(items, get_item_key, get_item_req);

        if (missing && missing.length) {
            throw new Error('missing requirements ' + missing.join(','));
        }

        var no_req = _.reject(items, _has_req);
        var has_req = _.filter(items, _has_req);

        var out_stack = [];

        while (has_req.length) {

            // find an item that is not required by any of the other items

            var unrequired = _.find(has_req,function(item){
               var item_key = get_item_key(item);

                return !_.find(has_req, function(subitem){
                    return _.contains(get_item_req(subitem), item_key);
                })
            });

            if (!unrequired) {
                throw new Error('cannot reduce requirements any further');
            }
            out_stack.unshift(unrequired);
            has_req = _.without(has_req, unrequired);
        }

        return no_req.concat(out_stack);

    }

    root.OrderByPrereq = OrderByPrereq;

}.call(this));
